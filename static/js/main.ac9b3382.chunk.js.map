{"version":3,"sources":["app/domain/ClosestColor.js","app/components/ColorCard.js","app/domain/ColorToString.js","app/components/Delta.js","app/components/ColorApp.js","app/components/ColorHash.js","app/main.js","serviceWorker.js"],"names":["colors","namedColors","reduce","hash","name","hex","Object","assign","nearest","nearestColor","from","cents","round","descriptor","ColorDescriptor","ColorCard","props","color","cardStyle","backgroundColor","hclColor","hcl","rgbColor","rgb","colorName","ClosestColor","prettyHcl","objectMap","prettyRgb","c","h","textClasses","classNames","l","description","describe","join","className","style","r","g","b","v","Math","max","toString","min","String","Delta","delta","hcl1","hcl2","deltae","d","background","ColorApp","length","lastColor","pairs","map","i","pair","hexRegexp","mountNode","document","getElementById","renderApp","window","location","upper","toUpperCase","uniq","split","filter","Boolean","properUrl","replace","indexOf","every","test","validate","render","addEventListener","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac9b3382.chunk.js","sourcesContent":["import nearestColor from 'nearest-color';\nimport namedColors from 'color-name-list';\n\n// nearestColor need objects {name => hex} as input\nconst colors = namedColors.reduce(\n  (hash, { name, hex }) => Object.assign(hash, { [name]: hex }),\n  {},\n);\n\nconst nearest = nearestColor.from(colors);\n\nexport default (color) => nearest(color);\n","import React from 'react';\nimport { hcl, rgb } from 'd3-color';\nimport round from 'round-to-precision';\nimport objectMap from 'object-map';\nimport classNames from 'classnames';\nimport ClosestColor from '../domain/ClosestColor';\nimport ColorDescriptor from 'color-descriptor';\n\nconst cents = round(0.01);\n\nconst descriptor = new ColorDescriptor();\n\nfunction ColorCard(props) {\n  const color = props.color;\n  const cardStyle = {\n    backgroundColor: color,\n  };\n\n  const hclColor = hcl(color);\n  const rgbColor = rgb(color);\n\n  const colorName = ClosestColor(hclColor.hex()).name;\n\n  const prettyHcl = objectMap(hclColor, cents);\n  const prettyRgb = objectMap(rgbColor, cents);\n  if (prettyHcl.c === \"0\") prettyHcl.h = 'any';\n\n  const textClasses = classNames({\n    'color-card__text': true,\n    'color-card__text_bright': hclColor.l > 50,\n    'color-card__text_dark': hclColor.l <= 50,\n  });\n\n  const description = descriptor.describe(color).join(', ');\n  return (\n    <div className=\"color-card\" style={cardStyle}>\n      <div className={textClasses}>\n        <div>\n          <span className=\"color-card__hex\">{color}</span>\n          <span className=\"color-card__name\"> â€” {colorName}</span>\n        </div>\n        <div className=\"color-card__description\">{description}</div>\n        <div className=\"color-card__properties\">\n          rgb({prettyRgb.r}, {prettyRgb.g}, {prettyRgb.b})\n        </div>\n        <div className=\"color-card__properties\">\n          hcl({prettyHcl.h}, {prettyHcl.c}, {prettyHcl.l})\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ColorCard;\n","import { rgb } from 'd3-color';\n\nfunction hex(v) {\n  return v < 0x10\n    ? '0' + Math.max(0, v).toString(16)\n    : Math.min(255, v).toString(16);\n}\n\nfunction toString(color) {\n  var rgbColor = rgb(String(color));\n  return '#' + hex(rgbColor.r) + hex(rgbColor.g) + hex(rgbColor.b);\n}\n\nexport default toString;\n","import React from 'react';\nimport { hcl } from 'd3-color';\nimport deltae from 'deltae';\nimport toString from '../domain/ColorToString';\nimport classNames from 'classnames';\n\nimport round from 'round-to-precision';\nconst cents = round(0.01);\n\nfunction Delta(props) {\n  let delta = 0;\n  const hcl1 = hcl(props.colors[0]);\n  const hcl2 = hcl(props.colors[1]);\n\n  deltae.delta(toString(hcl1), toString(hcl2), function(d) {\n    delta = cents(d);\n  });\n\n  const textClasses = classNames({\n    delta: true,\n    'color-card__text_bright': hcl1.l + hcl2.l > 100,\n    'color-card__text_dark': hcl1.l + hcl2.l <= 100,\n  });\n\n  const style = {\n    background:\n      '-webkit-linear-gradient(left, ' + hcl1 + ' 0%, ' + hcl2 + ' 100%)',\n  };\n\n  return (\n    <div style={style} className={textClasses}>\n      <span>{delta}</span>\n    </div>\n  );\n}\n\nexport default Delta;\n","import React from 'react';\nimport ColorCard from './ColorCard';\nimport Delta from './Delta';\n\nfunction ColorApp({ colors }) {\n  if (colors.length === 0) {\n    return null;\n  }\n\n  const lastColor = colors[colors.length - 1];\n\n  const pairs = colors.map((c, i) => [c, colors[i + 1]]);\n  pairs.length--;\n\n  return (\n    <div>\n      {pairs.map(pair => {\n        return [\n          <ColorCard key={pair[0]} color={pair[0]} />,\n          <Delta key={pair} colors={pair} />,\n        ];\n      })}\n      <ColorCard key={lastColor} color={lastColor} />\n    </div>\n  );\n}\n\nexport default ColorApp;\n","const hexRegexp = /^#([0-9A-F]{6})|([0-9A-F]{3})$/;\n\nexport function validate(hash) {\n  if (typeof hash !== 'string') return false;\n  if (hash.indexOf('%23') !== -1) return false;\n  const upper = hash.toUpperCase();\n  if (upper !== hash) return false;\n\n  const colors = upper.split('/');\n  return colors.every(c => hexRegexp.test(c));\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport ColorApp from './components/ColorApp';\nimport { validate } from './components/ColorHash';\nimport uniq from 'lodash.uniq';\n\nconst mountNode = document.getElementById('root');\n\nconst fix = cs => cs.replace(/%23/g, '#');\n\nfunction renderApp() {\n  const hash = window.location.hash;\n  const upper = hash.toUpperCase();\n  const colors = uniq(upper.split('/').filter(Boolean));\n  const properUrl = fix(colors.join('/'));\n\n  if (validate(hash) || colors.length === 0)\n    render(<ColorApp colors={colors} />, mountNode);\n  else window.location.hash = properUrl;\n}\n\nwindow.addEventListener('hashchange', renderApp, false);\nrenderApp();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}